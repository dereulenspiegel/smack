<?xml version="1.0"?>

<!-- Smack Build Script ========================================== -->
<!-- Jive Software      ============================================== -->

<!--
    $RCSfile$
    $Revision$
    $Date$
-->

<project name="Smack" default="all" basedir="..">

	<!-- TASKDEFS -->
	<!-- ======================================================================================= -->
	<!-- ======================================================================================= -->

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/build/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- PROPERTIES -->
	<!-- ======================================================================================= -->

	<!-- Smack Version -->
	<property name="version.major" value="3" />
	<property name="version.minor" value="3" />
	<property name="version.revision" value="0" />
	<property name="version.extra" value="SNAPSHOT" />

	<if>
		<equals arg1="${version.extra}" arg2="" />
		<then>
			<property name="version" value="${version.major}.${version.minor}.${version.revision}" />
			<property name="version.filename" value="${version.major}_${version.minor}_${version.revision}" />
		</then>
		<else>
			<property name="version" value="${version.major}.${version.minor}.${version.revision}.${version.extra}" />
			<property name="version.filename" value="${version.major}_${version.minor}_${version.revision}_${version.extra}" />
		</else>
	</if>
	<tstamp>
		<format property="builddate" pattern="MM/dd/yyyy" />
	</tstamp>

	<property file="${basedir}/build/build.properties" />
	<property name="compile.dir" value="${basedir}/target/classes" />
	<property name="compile.instr.dir" value="${basedir}/target/classes-instr" />
	<property name="compile.test.dir" value="${basedir}/target/classes-test" />
	<property name="compile.test-unit.dir" value="${basedir}/target/classes-test-unit" />
	<property name="jar.dest.dir" value="${basedir}/target" />
	<property name="javadoc.dest.dir" value="${basedir}/target/javadoc" />
	<property name="merge.lib.dir" value="${basedir}/build/merge" />
	<property name="test.dir" value="${basedir}/test" />
	<property name="test-unit.dir" value="${basedir}/test-unit" />
	<property name="resources.dir" value="${basedir}/build/resources" />
	<property name="jingle.extension.merge.lib.dir" value="${basedir}/jingle/extension/build/merge" />
	<property name="jingle.extension.lib.dir" value="${basedir}/jingle/extension/build/lib" />
	<property name="src.dir" value="${basedir}/source" />

	<!-- Test props - override these defaults in the properties file or in command line -->
	<property name="test.host" value="localhost" />
	<property name="test.port" value="5222" />
	<property name="test.admin.username" value="admin" />
	<property name="test.admin.password" value="admin" />
	<property name="test.admin.resource" value="Test" />
	<property name="test.smack.debug" value="false" />

	<!-- PATHS, DEPENDIENCIES, PATTERNS -->
	<!-- ======================================================================================= -->
	<!-- ======================================================================================= -->

	<patternset id="test.cases">
		<include name="org/jivesoftware/smack/**/*Test.java" />
		<exclude name="org/jivesoftware/smack/**/Messenger*Test.java" />
	</patternset>

	<patternset id="messenger.test.cases">
		<include name="org/jivesoftware/smack/**/Messenger*Test.java" />
	</patternset>

	<path id="emma.lib">
		<pathelement location="${basedir}/build/emma.jar" />
		<pathelement location="${basedir}/build/emma_ant.jar" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<path id="run.classpath">
		<fileset dir="${merge.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>


	<!-- TARGETS -->
	<!-- ======================================================================================= -->

	<!-- all -->
	<!-- ======================================================================================= -->
	<target name="all" depends="jar" description="Calls 'jar' target by default">
	</target>

	<!-- compile -->
	<!-- ======================================================================================= -->
	<target name="compile" description="Compiles all source to ${compile.dir}.">
		<!-- make target dir -->
		<mkdir dir="${compile.dir}" />
		<javac destdir="${compile.dir}" includeAntRuntime="no" debug="on" source="1.6" target="1.6">
			<src path="${basedir}/source" />
			<classpath>
				<fileset dir="${merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<mkdir dir="${compile.dir}/jingle/extension" />
		<javac destdir="${compile.dir}/jingle/extension" includeAntRuntime="no" debug="on" source="1.6" target="1.6">
			<src path="${basedir}/jingle/extension/source" />
			<classpath>
				<fileset dir="${merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${jingle.extension.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${jingle.extension.merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<pathelement path="${compile.dir}" />
			</classpath>
		</javac>
	</target>

	<!-- compile-test -->
	<!-- ======================================================================================= -->
	<target name="compile-test" description="Compiles all source to ${compile.dir}.">
		<!-- make target dir -->
		<mkdir dir="${compile.test-unit.dir}" />
		<javac destdir="${compile.test-unit.dir}" includeAntRuntime="no" debug="on" source="1.6" target="1.6">
			<src path="${test-unit.dir}" />
			<classpath>
				<fileset dir="${merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/build">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/build/build">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${compile.dir}" />
			</classpath>
		</javac>

		<!-- make target dir -->
		<mkdir dir="${compile.test.dir}" />
		<javac destdir="${compile.test.dir}" includeAntRuntime="no" debug="on" source="1.6" target="1.6">
			<src path="${test.dir}" />
			<classpath>
				<fileset dir="${merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${basedir}/build">
					<include name="junit.jar" />
					<include name="xmlunit.jar" />
				</fileset>
				<pathelement location="${compile.dir}" />
				<pathelement location="${compile.test-unit.dir}" />
			</classpath>
		</javac>


	</target>

	<target name="emma" description="turns on EMMA instrumentation/reporting">
		<property name="emma.enabled" value="true" />
		<!-- EMMA instr class output directory: -->
		<mkdir dir="${compile.instr.dir}" />
	</target>

	<target name="emma.instr" depends="compile, compile-test" description="runs the examples">
		<emma enabled="${emma.enabled}">
			<instr instrpath="${compile.dir}" destdir="$(compile.instr.dir}" metadatafile="${target}/metadata.emma" merge="true" />
		</emma>

	</target>

	<target name="emma.report">
		<emma enabled="${emma.enabled}">
			<report sourcepath="${src.dir}">
				<fileset dir="${target}">
					<include name="*.emma" />
				</fileset>

				<txt outfile="${target}/coverage.txt" />
				<html outfile="${target}/coverage.html" />
			</report>
		</emma>
	</target>


	<!-- jar -->
	<!-- ======================================================================================= -->
	<target name="jar" depends="compile" unless="jar.uptodate" description="Produces smack.jar">
		<copy todir="${compile.dir}/META-INF" file="${basedir}/build/resources/META-INF/smack-config.xml" />
		<jar destfile="${jar.dest.dir}/smack.jar" basedir="${compile.dir}" includes="org/jivesoftware/smack/**/*.class, **/smack-config.xml">
			<zipfileset src="${merge.lib.dir}/xpp.jar" />
		</jar>
		<copy todir="${compile.dir}/META-INF" file="${basedir}/build/resources/META-INF/smack.providers" />
		<jar destfile="${jar.dest.dir}/smackx.jar" basedir="${compile.dir}" includes="org/jivesoftware/smackx/**/*.class, **/*.providers" excludes="org/jivesoftware/smackx/debugger/*.class">
			<manifest>
				<attribute name="Class-Path" value="smack.jar" />
			</manifest>
			<zipfileset src="${merge.lib.dir}/jzlib.jar" />
		</jar>
		<copy todir="${compile.dir}/images">
			<fileset dir="${basedir}/build/resources/images">
				<include name="*.png" />
			</fileset>
		</copy>
		<jar destfile="${jar.dest.dir}/smackx-debug.jar" basedir="${compile.dir}" includes="org/jivesoftware/smackx/debugger/*.class, **/*.png">
			<manifest>
				<attribute name="Class-Path" value="smack.jar" />
			</manifest>
		</jar>
		<jar destfile="${jar.dest.dir}/smackx-jingle.jar" basedir="${compile.dir}/jingle/extension" includes="org/jivesoftware/smackx/**/*.class">
			<manifest>
				<attribute name="Class-Path" value="smack.jar, smackx.jar" />
			</manifest>
			<zipfileset src="${jingle.extension.merge.lib.dir}/jstun.jar" />
		</jar>
		<delete file="${compile.dir}/META-INF/smack-config.xml" />
		<delete file="${compile.dir}/META-INF/smack.providers" />
		<delete>
			<fileset dir="${compile.dir}/images">
				<include name="*.png" />
			</fileset>
		</delete>
	</target>

	<!-- jar -->
	<!-- ======================================================================================= -->
	<target name="jar-test" depends="compile-test" description="Produces jar of test code">
		<jar destfile="${jar.dest.dir}/smack-test.jar" basedir="${compile.test.dir}" includes="org/jivesoftware/smack/**/*.class" />
	</target>

	<!-- javadoc -->
	<!-- ======================================================================================= -->
	<target name="javadoc" description="JavaDocs the Smack source code">

		<mkdir dir="${javadoc.dest.dir}" />
		<javadoc packagenames="org.jivesoftware.smack.*, org.jivesoftware.smackx.*" excludepackagenames="org.jivesoftware.smack.util.collections" sourcepath="${basedir}/source" destdir="${javadoc.dest.dir}" author="true" windowtitle="Smack ${version} Documentation" overview="${basedir}/source/overview.html">
			<classpath>
				<fileset dir="${merge.lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<doctitle>
				<![CDATA[<font face="arial,helvetica">Smack ${version}</font>]]></doctitle>
		<header>
			<![CDATA[<b>Smack</b>]]></header>
	<bottom>
		<![CDATA[<i>Copyright &copy; 2003-2007 Jive Software. </i>]]></bottom>
<link href="http://java.sun.com/j2se/1.3/docs/api/" />
<link href="http://java.sun.com/j2ee/sdk_1.2.1/techdocs/api/" />
</javadoc>
</target>


<!-- test -->
<!-- ======================================================================================= -->
<target name="func-test" depends="compile, jar-test" unless="no.test">
<antcall target="test.messenger" />
<antcall target="test" />
</target>


<!-- test -->
<!-- ======================================================================================= -->
<target name="test" depends="compile, jar-test" unless="no.test">

<echo>


            **** no.test: ${no.test}


        </echo>

<property name="test.messenger" value="false" />

<if>
<not>
	<equals arg1="test.messenger" arg2="true" />
</not>
<then>
	<property name="test.classes" value="test.cases" />
</then>
</if>

<junit printsummary="on" fork="true" haltonfailure="false" failureproperty="tests.failed" showoutput="true">
<jvmarg value="-Demma.coverage.out.file=${target}/coverage.emma" />
<jvmarg value="-Demma.coverage.out.merge=true" />

<sysproperty key="smack.test.host" value="${test.host}" />
<sysproperty key="smack.test.port" value="${test.port}" />
<sysproperty key="smack.test.admin.username" value="${test.admin.username}" />
<sysproperty key="smack.test.admin.password" value="${test.admin.password}" />
<sysproperty key="smack.test.admin.resource" value="${test.admin.resource}" />
<sysproperty key="smack.debug" value="${test.smack.debug}" />

<classpath>
	<fileset dir="${basedir}/build/build">
		<include name="xmlunit.jar" />
	</fileset>
	<fileset dir="${merge.lib.dir}">
		<include name="*.jar" />
	</fileset>
	<fileset dir="${jar.dest.dir}">
		<include name="smack-test.jar" />
	</fileset>
	<fileset dir="${basedir}/build">
		<include name="*.jar" />
	</fileset>
	<pathelement location="${compile.instr.dir}" />
	<pathelement location="${test.dir}" />
	<pathelement location="${resources.dir}" />
</classpath>

<formatter type="brief" usefile="false" />
<formatter type="xml" />
<batchtest>
	<fileset dir="${basedir}/test">
		<patternset refid="${test.classes}" />
	</fileset>
</batchtest>
</junit>

<fail if="tests.failed" message="** Tests failed, see test log. **" />
</target>


<!-- test -->
<!-- ======================================================================================= -->
<target name="test.messenger" depends="compile, jar-test" unless="no.test">
<antcall target="test" inheritall="true" inheritrefs="true">
<param name="test.messenger" value="true" />
<param name="test.classes" value="messenger.test.cases" />
</antcall>
</target>


<!-- release -->
<!-- ======================================================================================= -->
<target name="release" description="Builds a release" if="release.exists" depends="release-exists">
<antcall target="jar">
<param name="no.test" value="true" />
</antcall>
<antcall target="javadoc">
<param name="no.test" value="true" />
</antcall>
<ant antfile="${basedir}/build/release.xml" />
</target>

<!-- checkcode -->
<!-- ======================================================================================= -->
<target name="pmd">
<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
<classpath>
	<pathelement location="${basedir}/build/pmd.jar" />
	<pathelement location="${basedir}/build/asm.jar" />
	<pathelement location="${basedir}/build/jaxen.jar" />
</classpath>
</taskdef>
<pmd shortFilenames="true">
<ruleset>migrating</ruleset>
<ruleset>finalizers</ruleset>
<formatter type="html" toFile="target/pmd_report.html" toConsole="true" />
<formatter type="xml" toFile="target/pmd_report.xml" toConsole="true" />
<fileset dir="source/">
	<include name="**/*.java" />
</fileset>
</pmd>
</target>

<target name="cpd">
<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
<classpath>
	<pathelement location="${basedir}/build/pmd.jar" />
	<pathelement location="${basedir}/build/asm.jar" />
	<pathelement location="${basedir}/build/jaxen.jar" />
</classpath>
</taskdef>
<cpd minimumTokenCount="100" outputFile="target/cpd_report.xml" format="xml">
<fileset dir="source/">
	<include name="**/*.java" />
</fileset>
</cpd>
</target>

<target name="checkcode">
<mkdir dir="${jar.dest.dir}" />
<antcall target="pmd" />
<antcall target="cpd" />
</target>

<!-- release-exists -->
<!-- ======================================================================================= -->
<target name="release-exists">
<available file="${basedir}/build/release.xml" property="release.exists" />
</target>


<!-- clean -->
<!-- ======================================================================================= -->
<target name="clean" description="Deletes all generated content.">
<delete dir="${javadoc.dest.dir}" />
<delete dir="${compile.instr.dir}" />
<delete dir="${compile.dir}" />
<delete dir="${compile.test.dir}" />
<delete dir="${compile-unit.test.dir}" />
<delete file="${basedir}/smack.jar" />
<delete file="${basedir}/smackx.jar" />
<delete file="${basedir}/smackx-debug.jar" />
<delete file="${basedir}/smack-test.jar" />
<delete file="${basedir}/smackx-jingle.jar" />
<delete dir="${basedir}/target" />
</target>

</project>
